// * https://www.prisma.io/docs/orm/prisma-client/deployment/caveats-when-deploying-to-aws-platforms 
// * https://www.prisma.io/docs/orm/prisma-client/deployment/deploy-to-a-different-os
// binaryTargets   = ["native", "linux-musl", "rhel-openssl-1.0.x", "linux-musl-openssl-3.0.x"]

generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["relationJoins"]
  binaryTargets   = ["native",  "rhel-openssl-1.0.x"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Convenio {
  id       Int        @id @default(autoincrement())
  name     String     @unique
  createAt DateTime?  @default(now())
  updateAt DateTime?  @updatedAt
  idImagen Int?
  imagen   Imagen?    @relation(fields: [idImagen], references: [id])
  Proyecto Proyecto[] @relation("ConvenioToProyecto")
}

model Autor {
  id       Int        @id @default(autoincrement())
  name     String
  email    String
  createAt DateTime?  @default(now())
  updateAt DateTime?  @updatedAt
  Proyecto Proyecto[]
}

model Region {
  id       Int        @id @default(autoincrement())
  name     String     @unique
  createAt DateTime?  @default(now())
  updateAt DateTime?  @updatedAt
  Proyecto Proyecto[] @relation("ProyectoToRegion")
}

model Tag {
  id       Int        @id @default(autoincrement())
  name     String     @unique
  createAt DateTime?  @default(now())
  updateAt DateTime?  @updatedAt
  Proyecto Proyecto[] @relation("ProyectoToTag")
}

model Sello {
  id       Int        @id @default(autoincrement())
  order    Int
  name     String     @unique
  createAt DateTime?  @default(now())
  updateAt DateTime?  @updatedAt
  idImagen Int?
  imagen   Imagen?    @relation(fields: [idImagen], references: [id])
  Proyecto Proyecto[] @relation("ProyectoToSello")
}

model Programa {
  id          Int        @id @default(autoincrement())
  name        String     @unique @default("")
  order       Int
  description String?    @default("")
  baseColor   String?
  preTitle    String?
  createAt    DateTime?  @default(now())
  updateAt    DateTime?  @updatedAt
  idImagen    Int?
  imagen      Imagen?    @relation(fields: [idImagen], references: [id])
  Project     Proyecto[]
  Linea       Linea[]    @relation("LineaToPrograma")
}

model Linea {
  id          Int        @id @default(autoincrement())
  order       Int        @default(autoincrement())
  name        String     @unique @default("")
  description String?    @default("")
  purpose     String?    @default("")
  millestone1 String?    @default("")
  millestone2 String?    @default("")
  millestone3 String?    @default("")
  baseColor   String?
  preTitle    String?
  createAt    DateTime?  @default(now())
  updateAt    DateTime?  @updatedAt
  idImagen    Int?
  imagen      Imagen?    @relation(fields: [idImagen], references: [id])
  Project     Proyecto[]
  Programa    Programa[] @relation("LineaToPrograma")
}

model Imagen {
  id       Int        @id @default(autoincrement())
  url      String
  Convenio Convenio[]
  Linea    Linea[]
  Programa Programa[]
  Proyecto Proyecto[]
  Sello    Sello[]
}

model ImagenIndicadores {
  id         Int       @id @default(autoincrement())
  title      String?
  subTitle   String?
  url        String?
  order      Int?      @default(0)
  proyectoId Int?
  Proyecto   Proyecto? @relation(fields: [proyectoId], references: [id])
}

model MapasUbicacion {
  id         Int       @id @default(autoincrement())
  title      String?
  subTitle   String?
  url        String?
  proyectoId Int?
  order      Int?      @default(0)
  Proyecto   Proyecto? @relation(fields: [proyectoId], references: [id])
}

model ImagenDescripcion {
  id         Int       @id @default(autoincrement())
  title      String?
  subTitle   String?
  url        String?
  proyectoId Int?
  order      Int?      @default(0)
  Proyecto   Proyecto? @relation(fields: [proyectoId], references: [id])
}

model ImagenAntecedentes {
  id         Int       @id @default(autoincrement())
  title      String?
  subTitle   String?
  url        String?
  proyectoId Int?
  order      Int?      @default(0)
  Proyecto   Proyecto? @relation(fields: [proyectoId], references: [id])
}

model Multimedia {
  id         Int       @id @default(autoincrement())
  title      String
  mediaType  MediaType
  subTitle   String?
  url        String?
  order      Int?      @default(0)
  proyectoId Int
  Proyecto   Proyecto  @relation(fields: [proyectoId], references: [id])

  @@index([mediaType])
}

model Proyecto {
  id                   Int                  @id @default(autoincrement())
  idLinea              Int?
  idPrograma           Int?
  idAtutor             Int?
  completed            Boolean              @default(false)
  year                 Int                  @default(2022)
  name                 String
  objetivo             String?
  products             String?
  places               String?
  impacto              String?
  importancia          String?
  pertinencia          String?
  createAt             DateTime?            @default(now())
  updateAt             DateTime?            @updatedAt
  equipo               String?
  idImagen             Int?
  actores              String?
  beneficiarios        String?
  descripcion          String?
  roleInvestigador     String?
  antecedentes         String?
  imagenesAntecedentes ImagenAntecedentes[]
  imagenesDescripcion  ImagenDescripcion[]
  imagenesIndicadores  ImagenIndicadores[]
  mapasUbicacion       MapasUbicacion[]
  multimedias          Multimedia[]
  autor                Autor?               @relation(fields: [idAtutor], references: [id])
  imagen               Imagen?              @relation(fields: [idImagen], references: [id])
  linea                Linea?               @relation(fields: [idLinea], references: [id])
  programa             Programa?            @relation(fields: [idPrograma], references: [id])
  convenios            Convenio[]           @relation("ConvenioToProyecto")
  regions              Region[]             @relation("ProyectoToRegion")
  sellos               Sello[]              @relation("ProyectoToSello")
  tags                 Tag[]                @relation("ProyectoToTag")
}

model Account {
  id                String  @id @default(uuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(uuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String    @id @default(uuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  isActive      Boolean   @default(true)
  roles         String[]  @default(["user"])
  password      String?
  accounts      Account[]
  sessions      Session[]
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

enum MediaType {
  image
  video
}
