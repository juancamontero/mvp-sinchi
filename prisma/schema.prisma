generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["relationJoins"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Convenio {
  id       Int        @id @default(autoincrement())
  name     String     @unique
  Proyecto Proyecto[] @relation("ConvenioToProyecto")
}

model Autor {
  id       Int        @id @default(autoincrement())
  name     String
  email    String
  Proyecto Proyecto[]
}

model Region {
  id       Int        @id @default(autoincrement())
  name     String     @unique
  Proyecto Proyecto[] @relation("ProyectoToRegion")
}

model Tag {
  id       Int        @id @default(autoincrement())
  name     String     @unique
  Proyecto Proyecto[] @relation("ProyectoToTag")
}

model Sello {
  id       Int        @id @default(autoincrement())
  order    Int        @default(autoincrement())
  name     String     @unique
  url      String
  Proyecto Proyecto[] @relation("ProyectoToSello")
}

model Programa {
  id          Int        @id @default(autoincrement())
  name        String     @unique @default("")
  order       Int        @default(autoincrement())
  description String?    @default("")
  Project     Proyecto[]
  Linea       Linea[]    @relation("LineaToPrograma")
  urlImage    String?    @default("")
  urlIcon     String?    @default("/images/programas/programa-1.webp")
}

model Linea {
  id          Int        @id @default(autoincrement())
  order       Int        @default(autoincrement())
  name        String     @unique @default("")
  description String?    @default("")
  purpose     String?    @default("")
  millestone1 String?    @default("")
  millestone2 String?    @default("")
  millestone3 String?    @default("")
  Project     Proyecto[]
  Programa    Programa[] @relation("LineaToPrograma")
  urlImage    String?    @default("")
  urlIcon     String?    @default("/images/lineas/linea-1.webp")
}

model Proyecto {
  id         Int        @id @default(autoincrement())
  idLinea    Int?
  idPrograma Int?
  idAtutor   Int?
  completed  Boolean    @default(false)
  year       Int        @default(2022)
  name       String
  objetivo   String?    @default("")
  products   String?    @default("")
  places     String?    @default("")
  autor      Autor?     @relation(fields: [idAtutor], references: [id])
  linea      Linea?     @relation(fields: [idLinea], references: [id])
  programa   Programa?  @relation(fields: [idPrograma], references: [id])
  convenios  Convenio[] @relation("ConvenioToProyecto")
  regions    Region[]   @relation("ProyectoToRegion")
  sellos     Sello[]    @relation("ProyectoToSello")
  tags       Tag[]      @relation("ProyectoToTag")
  urlImage   String?    @default("/images/background-fallback.webp")
}

// * AUTH JS
model Account {
  id                String  @id @default(uuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(uuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String    @id @default(uuid())
  name          String?
  password      String?
  roles         String[]  @default(["user"])
  isActive      Boolean   @default(true)
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}
