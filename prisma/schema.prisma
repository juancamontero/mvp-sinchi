generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["relationJoins"]
  // binaryTargets   = ["native"]
  // binaryTargets   = ["native", "rhel-openssl-1.0.x"]
  // binaryTargets   = ["native", "linux-musl-openssl-3.0.x"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum MediaType {
  image
  video
}

model Convenio {
  id       Int       @id @default(autoincrement())
  idImagen Int?
  name     String    @unique
  createAt DateTime? @default(now())
  updateAt DateTime? @updatedAt

  //relation

  imagen   Imagen?    @relation(fields: [idImagen], references: [id])
  Proyecto Proyecto[] @relation("ConvenioToProyecto")
}

model Autor {
  id       Int        @id @default(autoincrement())
  createAt DateTime?  @default(now())
  updateAt DateTime?  @updatedAt
  name     String
  email    String
  Proyecto Proyecto[]
}

model Region {
  id       Int        @id @default(autoincrement())
  createAt DateTime?  @default(now())
  updateAt DateTime?  @updatedAt
  name     String     @unique
  Proyecto Proyecto[] @relation("ProyectoToRegion")
}

model Tag {
  id       Int        @id @default(autoincrement())
  createAt DateTime?  @default(now())
  updateAt DateTime?  @updatedAt
  name     String     @unique
  Proyecto Proyecto[] @relation("ProyectoToTag")
}

model Sello {
  id       Int       @id @default(autoincrement())
  idImagen Int?
  createAt DateTime? @default(now())
  updateAt DateTime? @updatedAt
  order    Int
  name     String    @unique

  // relations
  Proyecto Proyecto[] @relation("ProyectoToSello")
  imagen   Imagen?    @relation(fields: [idImagen], references: [id])
}

model Programa {
  id          Int       @id @default(autoincrement())
  idImagen    Int?
  createAt    DateTime? @default(now())
  updateAt    DateTime? @updatedAt
  preTitle    String?
  baseColor   String?
  name        String    @unique @default("")
  order       Int
  description String?   @default("")

  // relations
  Project Proyecto[]
  Linea   Linea[]    @relation("LineaToPrograma")
  imagen  Imagen?    @relation(fields: [idImagen], references: [id])
}

model Linea {
  id          Int       @id @default(autoincrement())
  idImagen    Int?
  createAt    DateTime? @default(now())
  updateAt    DateTime? @updatedAt
  order       Int       @default(autoincrement())
  preTitle    String?
  baseColor   String?
  name        String    @unique @default("")
  description String?   @default("")
  purpose     String?   @default("")
  millestone1 String?   @default("")
  millestone2 String?   @default("")
  millestone3 String?   @default("")

  // relations
  Project  Proyecto[]
  Programa Programa[] @relation("LineaToPrograma")
  imagen   Imagen?    @relation(fields: [idImagen], references: [id])
}

model Imagen {
  id  Int    @id @default(autoincrement())
  url String

  // relations
  Convenio   Convenio[]
  Proyecto   Proyecto[]
  Sello      Sello[]
  Programa   Programa[]
  Linea      Linea[]
  proyectoId Int?
}

model ImagenIndicadores {
  id         Int       @id @default(autoincrement())
  title      String?
  subTitle   String?
  url        String?
  order      Int?      @default(0)
  Proyecto   Proyecto? @relation(fields: [proyectoId], references: [id])
  proyectoId Int?
}

model MapasUbicacion {
  id         Int       @id @default(autoincrement())
  title      String?
  subTitle   String?
  url        String?
  order      Int?      @default(0)
  Proyecto   Proyecto? @relation(fields: [proyectoId], references: [id])
  proyectoId Int?
}

model ImagenDescripcion {
  id         Int       @id @default(autoincrement())
  title      String?
  subTitle   String?
  url        String?
  order      Int?      @default(0)
  Proyecto   Proyecto? @relation(fields: [proyectoId], references: [id])
  proyectoId Int?
}

model ImagenAntecedentes {
  id         Int       @id @default(autoincrement())
  title      String?
  subTitle   String?
  url        String?
  order      Int?      @default(0)
  Proyecto   Proyecto? @relation(fields: [proyectoId], references: [id])
  proyectoId Int?
}

model Multimedia {
  id         Int       @id @default(autoincrement())
  title      String
  mediaType  MediaType
  subTitle   String?
  url        String?
  order      Int?      @default(0)
  Proyecto   Proyecto  @relation(fields: [proyectoId], references: [id])
  proyectoId Int

  @@index([mediaType])
}

model Proyecto {
  id               Int       @id @default(autoincrement())
  createAt         DateTime? @default(now())
  updateAt         DateTime? @updatedAt
  idLinea          Int?
  idPrograma       Int?
  idAtutor         Int?
  idImagen         Int?
  roleInvestigador String?
  equipo           String?
  completed        Boolean   @default(false)
  year             Int       @default(2022)
  name             String
  objetivo         String?
  products         String?
  places           String?
  importancia      String?
  pertinencia      String?
  impacto          String?
  antecedentes     String?
  descripcion      String?
  actores          String?
  beneficiarios    String?

  // relations
  autor                Autor?               @relation(fields: [idAtutor], references: [id])
  imagen               Imagen?              @relation(fields: [idImagen], references: [id])
  linea                Linea?               @relation(fields: [idLinea], references: [id])
  programa             Programa?            @relation(fields: [idPrograma], references: [id])
  convenios            Convenio[]           @relation("ConvenioToProyecto")
  regions              Region[]             @relation("ProyectoToRegion")
  sellos               Sello[]              @relation("ProyectoToSello")
  tags                 Tag[]                @relation("ProyectoToTag")
  imagenesAntecedentes ImagenAntecedentes[]
  imagenesDescripcion  ImagenDescripcion[]
  imagenesIndicadores  ImagenIndicadores[]
  mapasUbicacion       MapasUbicacion[]
  multimedias          Multimedia[]
}

// * AUTH JS
model Account {
  id                String  @id @default(uuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(uuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String    @id @default(uuid())
  name          String?
  password      String?
  roles         String[]  @default(["user"])
  isActive      Boolean   @default(true)
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}
